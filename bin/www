#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('test-farmers-api:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var models = require('../models');

models.sequelize.sync({ force: true })
  .then(async function() {
    const farmerNames = [
      'John Doe',
      'Jane Doe',
      'Jenny Doe',
      'Jason Doe'
    ];

    const farmerEmails = [
      'john.doe@agriculteur.fr',
      'jane.doe@agricultrice.fr',
      'jenny.doe@agricultrice.fr',
      'jason.doe@agriculteur.fr'
    ];

    const farmerPhones = [
      '06 12 34 56 78',
      '06 98 76 54 32',
      '07 13 57 24 68',
      '07 97 53 86 42'
    ];

    const farmNames = [
      'Ma Première Ferme',
      'Ma Deuxième Ferme',
      'Ma Troisième Ferme',
      'Ma Quatrième Ferme'
    ];

    const farmAddresses = [
      '12, rue du marché',
      '34, rue du fromage',
      '98, rue de la tomate',
      "76, rue de la patate"
    ];

    const farmCities = [
      'nevers',
      'pouges',
      'fourchambault',
      'varennes-vauzelles'
    ];

    const farmLocations = [
      '46.987471, 3.150616',
      '47.076937, 3.094017',
      '47.019237, 3.087279',
      '47.001512, 3.134294'
    ];

    const userNames = farmerNames;
    const userEmails = farmerEmails;
    const userPasswords = [
      '$2b$10$wWlZpll00BFpm67GUiynauby6ku1sW5Wf2./M2Ekf9g9qKIJ.NxJK',
      '$2b$10$yNfzEtPCJLCHcswP8gZXqeYKHfnVNGYfTXfRjFe3hd84JQHJfi70m',
      '$2b$10$QdDpftvAIxN0N65qWG72KOiWL7vwoamUfmOIc9NrQGtq60YsLBb0q',
      '$2b$10$xVGA/psQGyMC88t8k1meveZZM6U2IgcwO9DKRFI26tZafSUGy7T7K'
    ];

    const userRoles = [
      'Admin',
      'User',
      'User',
      'User',
    ];

    for (var i = 0; i < farmerNames.length; i++) {
      var user = await models.User.create({
        name: userNames[i],
        email: userEmails[i],
        password: userPasswords[i],
        role: userRoles[i],
        token: '{}'
      });

      var farmer = await models.Farmer.create({
        name: farmerNames[i],
        email: farmerEmails[i],
        phone: farmerPhones[i]
      })

      var farm = await models.Farm.create({
        name: farmNames[i],
        address: farmAddresses[i],
        city: farmCities[i],
        coordinates: farmLocations[i]
      });

      await farmer.addFarm(farm);
      await farm.addFarmer(farmer);
    }

    /**
     * Listen on provided port, on all network interfaces.
     */

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  })
  .catch(error => console.error(error));

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
